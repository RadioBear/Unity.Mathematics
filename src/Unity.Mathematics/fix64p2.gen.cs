//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;

#pragma warning disable 0660, 0661

namespace Unity.Mathematics
{
    [DebuggerTypeProxy(typeof(fix64p2.DebuggerProxy))]
    [System.Serializable]
    public partial struct fix64p2 : System.IEquatable<fix64p2>, IFormattable
    {
        public fix64p x;
        public fix64p y;


        /// <summary>Constructs a fix64p2 vector from two fix64p values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fix64p2(fix64p x, fix64p y)
        { 
            this.x = x;
            this.y = y;
        }

        /// <summary>Constructs a fix64p2 vector from a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fix64p2(fix64p2 xy)
        { 
            this.x = xy.x;
            this.y = xy.y;
        }

        /// <summary>Constructs a fix64p2 vector from a single fix64p value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fix64p2(fix64p v)
        {
            this.x = v;
            this.y = v;
        }


        /// <summary>Implicitly converts a single fix64p value to a fix64p2 vector by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fix64p2(fix64p v) { return new fix64p2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator * (fix64p2 lhs, fix64p2 rhs) { return new fix64p2 (lhs.x * rhs.x, lhs.y * rhs.y); }

        /// <summary>Returns the result of a componentwise multiplication operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator * (fix64p2 lhs, fix64p rhs) { return new fix64p2 (lhs.x * rhs, lhs.y * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator * (fix64p lhs, fix64p2 rhs) { return new fix64p2 (lhs * rhs.x, lhs * rhs.y); }


        /// <summary>Returns the result of a componentwise addition operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator + (fix64p2 lhs, fix64p2 rhs) { return new fix64p2 (lhs.x + rhs.x, lhs.y + rhs.y); }

        /// <summary>Returns the result of a componentwise addition operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator + (fix64p2 lhs, fix64p rhs) { return new fix64p2 (lhs.x + rhs, lhs.y + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator + (fix64p lhs, fix64p2 rhs) { return new fix64p2 (lhs + rhs.x, lhs + rhs.y); }


        /// <summary>Returns the result of a componentwise subtraction operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator - (fix64p2 lhs, fix64p2 rhs) { return new fix64p2 (lhs.x - rhs.x, lhs.y - rhs.y); }

        /// <summary>Returns the result of a componentwise subtraction operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator - (fix64p2 lhs, fix64p rhs) { return new fix64p2 (lhs.x - rhs, lhs.y - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator - (fix64p lhs, fix64p2 rhs) { return new fix64p2 (lhs - rhs.x, lhs - rhs.y); }


        /// <summary>Returns the result of a componentwise division operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator / (fix64p2 lhs, fix64p2 rhs) { return new fix64p2 (lhs.x / rhs.x, lhs.y / rhs.y); }

        /// <summary>Returns the result of a componentwise division operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator / (fix64p2 lhs, fix64p rhs) { return new fix64p2 (lhs.x / rhs, lhs.y / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator / (fix64p lhs, fix64p2 rhs) { return new fix64p2 (lhs / rhs.x, lhs / rhs.y); }


        /// <summary>Returns the result of a componentwise modulus operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator % (fix64p2 lhs, fix64p2 rhs) { return new fix64p2 (lhs.x % rhs.x, lhs.y % rhs.y); }

        /// <summary>Returns the result of a componentwise modulus operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator % (fix64p2 lhs, fix64p rhs) { return new fix64p2 (lhs.x % rhs, lhs.y % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator % (fix64p lhs, fix64p2 rhs) { return new fix64p2 (lhs % rhs.x, lhs % rhs.y); }


        /// <summary>Returns the result of a componentwise increment operation on a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator ++ (fix64p2 val) { return new fix64p2 (++val.x, ++val.y); }


        /// <summary>Returns the result of a componentwise decrement operation on a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator -- (fix64p2 val) { return new fix64p2 (--val.x, --val.y); }


        /// <summary>Returns the result of a componentwise less than operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x < rhs.x, lhs.y < rhs.y); }

        /// <summary>Returns the result of a componentwise less than operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x < rhs, lhs.y < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs < rhs.x, lhs < rhs.y); }


        /// <summary>Returns the result of a componentwise less or equal operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x <= rhs.x, lhs.y <= rhs.y); }

        /// <summary>Returns the result of a componentwise less or equal operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x <= rhs, lhs.y <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs <= rhs.x, lhs <= rhs.y); }


        /// <summary>Returns the result of a componentwise greater than operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x > rhs.x, lhs.y > rhs.y); }

        /// <summary>Returns the result of a componentwise greater than operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x > rhs, lhs.y > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs > rhs.x, lhs > rhs.y); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x >= rhs.x, lhs.y >= rhs.y); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x >= rhs, lhs.y >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs >= rhs.x, lhs >= rhs.y); }


        /// <summary>Returns the result of a componentwise unary minus operation on a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator - (fix64p2 val) { return new fix64p2 (-val.x, -val.y); }


        /// <summary>Returns the result of a componentwise unary plus operation on a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 operator + (fix64p2 val) { return new fix64p2 (+val.x, +val.y); }


        /// <summary>Returns the result of a componentwise equality operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x == rhs.x, lhs.y == rhs.y); }

        /// <summary>Returns the result of a componentwise equality operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x == rhs, lhs.y == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs == rhs.x, lhs == rhs.y); }


        /// <summary>Returns the result of a componentwise not equal operation on two fix64p2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (fix64p2 lhs, fix64p2 rhs) { return new bool2 (lhs.x != rhs.x, lhs.y != rhs.y); }

        /// <summary>Returns the result of a componentwise not equal operation on a fix64p2 vector and a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (fix64p2 lhs, fix64p rhs) { return new bool2 (lhs.x != rhs, lhs.y != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a fix64p value and a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (fix64p lhs, fix64p2 rhs) { return new bool2 (lhs != rhs.x, lhs != rhs.y); }




        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(x, y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p4(y, y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p3(y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p2(x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fix64p2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fix64p2(y, y); }
        }



        /// <summary>Returns the fix64p element at a specified index.</summary>
        unsafe public fix64p this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (fix64p2* array = &this) { return ((fix64p*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (fix64p* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the fix64p2 is equal to a given fix64p2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(fix64p2 rhs) { return x == rhs.x && y == rhs.y; }

        /// <summary>Returns true if the fix64p2 is equal to a given fix64p2, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((fix64p2)o); }


        /// <summary>Returns a hash code for the fix64p2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)math.hash(this); }


        /// <summary>Returns a string representation of the fix64p2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("fix64p2({0}, {1})", x, y);
        }

        /// <summary>Returns a string representation of the fix64p2 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("fix64p2({0}, {1})", x.ToString(format, formatProvider), y.ToString(format, formatProvider));
        }

        internal sealed class DebuggerProxy
        {
            public fix64p x;
            public fix64p y;
            public DebuggerProxy(fix64p2 v)
            {
                x = v.x;
                y = v.y;
            }
        }

    }

    public static partial class math
    {
        /// <summary>Returns a fix64p2 vector constructed from two fix64p values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 fix64p2(fix64p x, fix64p y) { return new fix64p2(x, y); }

        /// <summary>Returns a fix64p2 vector constructed from a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 fix64p2(fix64p2 xy) { return new fix64p2(xy); }

        /// <summary>Returns a fix64p2 vector constructed from a single fix64p value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 fix64p2(fix64p v) { return new fix64p2(v); }

        /// <summary>Returns a uint hash code of a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(fix64p2 v)
        {
            return csum(fold_to_uint(v) * uint2(0x7AF32C49u, 0xAE131389u)) + 0x5D1B165Bu;
        }

        /// <summary>
        /// Returns a uint2 vector hash code of a fix64p2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint2 hashwide(fix64p2 v)
        {
            return (fold_to_uint(v) * uint2(0x87096CD7u, 0x4C7F6DD1u)) + 0x4822A3E9u;
        }

        /// <summary>Returns the result of specified shuffling of the components from two fix64p2 vectors into a fix64p value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p shuffle(fix64p2 a, fix64p2 b, ShuffleComponent x)
        {
            return select_shuffle_component(a, b, x);
        }

        /// <summary>Returns the result of specified shuffling of the components from two fix64p2 vectors into a fix64p2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p2 shuffle(fix64p2 a, fix64p2 b, ShuffleComponent x, ShuffleComponent y)
        {
            return fix64p2(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y));
        }

        /// <summary>Returns the result of specified shuffling of the components from two fix64p2 vectors into a fix64p3 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p3 shuffle(fix64p2 a, fix64p2 b, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z)
        {
            return fix64p3(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y),
                select_shuffle_component(a, b, z));
        }

        /// <summary>Returns the result of specified shuffling of the components from two fix64p2 vectors into a fix64p4 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fix64p4 shuffle(fix64p2 a, fix64p2 b, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z, ShuffleComponent w)
        {
            return fix64p4(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y),
                select_shuffle_component(a, b, z),
                select_shuffle_component(a, b, w));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static fix64p select_shuffle_component(fix64p2 a, fix64p2 b, ShuffleComponent component)
        {
            switch(component)
            {
                case ShuffleComponent.LeftX:
                    return a.x;
                case ShuffleComponent.LeftY:
                    return a.y;
                case ShuffleComponent.RightX:
                    return b.x;
                case ShuffleComponent.RightY:
                    return b.y;
                default:
                    throw new System.ArgumentException("Invalid shuffle component: " + component);
            }
        }

    }
}
